#!/bin/bash
# GOB Monitoring Dashboard Quick Access Command
# Usage: monitor [start|stop|restart|open|status|logs]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
MONITOR_URL="http://localhost:8050"
SERVICE_NAME="gob-monitoring"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

print_status() {
    local status="$1"
    local message="$2"
    case $status in
        "success") echo -e "${GREEN}✅ ${message}${NC}" ;;
        "error") echo -e "${RED}❌ ${message}${NC}" ;;
        "warning") echo -e "${YELLOW}⚠️  ${message}${NC}" ;;
        "info") echo -e "${CYAN}ℹ️  ${message}${NC}" ;;
        *) echo -e "${NC}${message}" ;;
    esac
}

print_header() {
    echo -e "${CYAN}=== GOB Monitoring Dashboard ===${NC}"
}

show_help() {
    print_header
    echo
    echo -e "${YELLOW}Usage:${NC} monitor [command]"
    echo
    echo -e "${YELLOW}Commands:${NC}"
    echo -e "  ${GREEN}open${NC}           Open monitoring dashboard in browser"
    echo -e "  ${GREEN}start${NC}          Start monitoring service"
    echo -e "  ${GREEN}stop${NC}           Stop monitoring service"
    echo -e "  ${GREEN}restart${NC}        Restart monitoring service"
    echo -e "  ${GREEN}status${NC}         Show service status"
    echo -e "  ${GREEN}logs${NC}           Show service logs"
    echo -e "  ${GREEN}install${NC}        Install service for auto-start"
    echo -e "  ${GREEN}uninstall${NC}      Remove auto-start service"
    echo -e "  ${GREEN}help${NC}           Show this help message"
    echo
    echo -e "${YELLOW}Examples:${NC}"
    echo -e "  monitor open        # Open dashboard"
    echo -e "  monitor status      # Check if running"
    echo -e "  monitor install     # Enable auto-start on boot"
    echo
    echo -e "${YELLOW}Dashboard URL:${NC} ${MONITOR_URL}"
}

open_dashboard() {
    print_header
    print_status "info" "Opening GOB Monitoring Dashboard..."
    
    # Check if service is running first
    if ! curl -s -f "$MONITOR_URL" > /dev/null 2>&1; then
        print_status "warning" "Monitoring service not responding, attempting to start..."
        start_service
        sleep 5
    fi
    
    # Open browser
    if command -v xdg-open >/dev/null 2>&1; then
        xdg-open "$MONITOR_URL"
        print_status "success" "Dashboard opened in browser"
    elif command -v open >/dev/null 2>&1; then  # macOS
        open "$MONITOR_URL"
        print_status "success" "Dashboard opened in browser"
    else
        print_status "warning" "Could not auto-open browser. Please visit: $MONITOR_URL"
    fi
}

start_service() {
    print_header
    print_status "info" "Starting monitoring service..."
    
    if systemctl --user is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        print_status "warning" "Service is already running"
        return 0
    fi
    
    # Try to start as user service first, then system service
    if systemctl --user start "$SERVICE_NAME" 2>/dev/null; then
        print_status "success" "User service started"
    elif sudo systemctl start "$SERVICE_NAME" 2>/dev/null; then
        print_status "success" "System service started"
    else
        # Fallback: start directly
        print_status "info" "Starting service directly..."
        cd "$SCRIPT_DIR"
        nohup python server.py --port 8050 >/dev/null 2>&1 &
        sleep 3
        if curl -s -f "$MONITOR_URL" > /dev/null 2>&1; then
            print_status "success" "Service started directly"
        else
            print_status "error" "Failed to start service"
            return 1
        fi
    fi
}

stop_service() {
    print_header
    print_status "info" "Stopping monitoring service..."
    
    # Try to stop user service, then system service
    if systemctl --user stop "$SERVICE_NAME" 2>/dev/null; then
        print_status "success" "User service stopped"
    elif sudo systemctl stop "$SERVICE_NAME" 2>/dev/null; then
        print_status "success" "System service stopped"
    else
        # Fallback: kill process
        if pkill -f "python server.py.*port 8050"; then
            print_status "success" "Service stopped"
        else
            print_status "warning" "No service found to stop"
        fi
    fi
}

restart_service() {
    print_header
    print_status "info" "Restarting monitoring service..."
    stop_service
    sleep 2
    start_service
}

show_status() {
    print_header
    
    # Check if service is responding
    if curl -s -f "$MONITOR_URL" > /dev/null 2>&1; then
        print_status "success" "Monitoring dashboard is running"
        print_status "info" "URL: $MONITOR_URL"
    else
        print_status "error" "Monitoring dashboard is not responding"
    fi
    
    # Check systemd service status
    if systemctl --user is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        print_status "info" "User service status: $(systemctl --user is-active $SERVICE_NAME 2>/dev/null || echo 'inactive')"
    elif systemctl is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        print_status "info" "System service status: $(systemctl is-active $SERVICE_NAME 2>/dev/null || echo 'inactive')"
    else
        print_status "warning" "No systemd service found"
    fi
    
    # Check for direct processes
    if pgrep -f "python server.py.*port 8050" >/dev/null; then
        print_status "info" "Direct process running (PID: $(pgrep -f 'python server.py.*port 8050'))"
    fi
}

show_logs() {
    print_header
    print_status "info" "Service logs:"
    echo
    
    if systemctl --user is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        journalctl --user -u "$SERVICE_NAME" --no-pager -n 20
    elif systemctl is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        sudo journalctl -u "$SERVICE_NAME" --no-pager -n 20
    else
        print_status "warning" "No systemd service logs found"
        if [ -f "$SCRIPT_DIR/logs/browser_opener.log" ]; then
            echo "Browser opener logs:"
            tail -n 10 "$SCRIPT_DIR/logs/browser_opener.log"
        fi
    fi
}

install_service() {
    print_header
    print_status "info" "Installing monitoring service for auto-start..."
    
    SERVICE_FILE="$SCRIPT_DIR/gob-monitoring.service"
    
    if [ ! -f "$SERVICE_FILE" ]; then
        print_status "error" "Service file not found: $SERVICE_FILE"
        return 1
    fi
    
    # Install as system service
    sudo cp "$SERVICE_FILE" /etc/systemd/system/
    sudo systemctl daemon-reload
    sudo systemctl enable "$SERVICE_NAME"
    
    print_status "success" "Service installed for auto-start on boot"
    print_status "info" "To start now: monitor start"
}

uninstall_service() {
    print_header
    print_status "info" "Uninstalling monitoring service..."
    
    sudo systemctl stop "$SERVICE_NAME" 2>/dev/null || true
    sudo systemctl disable "$SERVICE_NAME" 2>/dev/null || true
    sudo rm -f "/etc/systemd/system/$SERVICE_NAME.service"
    sudo systemctl daemon-reload
    
    print_status "success" "Service uninstalled"
}

# Main command dispatcher
case "${1:-open}" in
    "open")
        open_dashboard
        ;;
    "start")
        start_service
        ;;
    "stop")
        stop_service
        ;;
    "restart")
        restart_service
        ;;
    "status")
        show_status
        ;;
    "logs")
        show_logs
        ;;
    "install")
        install_service
        ;;
    "uninstall")
        uninstall_service
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        print_status "error" "Unknown command: $1"
        echo
        show_help
        exit 1
        ;;
esac
